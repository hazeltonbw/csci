  ____ ___  ____  _____    ____  ___  _     _____ 
 / ___/ _ \|  _ \| ____|  / ___|/ _ \| |   |  ___|
| |  | | | | | | |  _|   | |  _| | | | |   | |_   
| |__| |_| | |_| | |___  | |_| | |_| | |___|  _|  
 \____\___/|____/|_____|  \____|\___/|_____|_|    
                                                  

Assignment: You must implement Mergesort in as minimal statements as possible.
You must exactly implement mergesort we go over in class - no variants or
shortcuts allowed. Especially no implementations that are worse than O(NlogN) time).

10 points represents a 100% on this assignment, which can be achieved by a
combination of correctness and code size. If you go over 10, you get extra
credit.

7 of the points will be available for code correctness, for passing the test cases posted 

Extra points will be scored based on how few semicolons (in golf terminology: "strokes") your code used -

    17+ strokes: Did you even try? (-3 points)
    15-16 strokes: Triple Bogey (-2 points)
    13-14 strokes: Double Bogey (-1 points)
    11-12 strokes: Bogey (0 points)
    9-10 strokes: Par (1 points)
    7-8 strokes: Birdie (2 points)
    5-6 strokes: Eagle (3 points)
    4 strokes: Double Eagle (4 points)
    3 strokes: Condor (5 points)
    2 strokes: Double Condor (6 points)
	1 strokes: Triple Condor (7 points)
	0 strokes: Quadruple Condor (8 points)

If you fail to deallocate memory (as measured by valgrind), you will gain an
additional stroke. To see if you are leaking memory, type "make memcheck" when
you are done, and the cow will tell you if you are cool.

If you have any warnings in your code (when compiled with -Wall and -Wextra) you will gain
an additional stroke. If you can figure out how to get the compiler to not
warn a given message even with -Wall and -Wextra on, you will not be penalized.

If you turn in the same solution as someone else, you get 0 points. This
includes internet solutions or code posted on a Discord server, etc.

Rules:

    1) You MAY ONLY write code between the lines BEGIN GOLF and END GOLF in main.cc
    2) You MAY NOT change any lines of code outside that section.
    3) You MAY use preprocessor directives, but only to improve readability, not to save any strokes in your code. (For example, "#define SEMICOLON ;" is right out.)
    4) You MAY NOT use any STL or standard library classes or functions, except as noted below.
    5) You MAY use the following data structures (and only the following data
	structures): a C-style array, a C++ style array (#include <array>), and
	vectors (#include <vector>).
    6) You MAY call any of the standard member functions on C++ arrays and
	vectors. (Like .size() or .at().) Again, otherwise, you may use no
	functions in std:: (Especially not sort().)
	7) You MAY generate and use iterators and pointers for these three data structures.
    8) You MAY use the comma operator to cut down on semicolons.
    9) You MAY NOT make new functions (or lambdas), everything must be within
	the one mergesort() function. You can change its signature, but remember you
	can't touch main.
    10) You MAY use the ternary if operator (?:) to cut down on semicolons.
    11) You MAY not use digraphs or trigraphs
    12) Your code MUST ACTUALLY IMPLEMENT MERGESORT (and not some other sort function), and do so with a O(NlogN) running time.
    13) If you have commented out lines of code with semicolons, they WILL count against your stroke count, so remove them before the code is collected.
    14) You MAY use the ++ and -- operators to cut down on semicolons.
    15) You MAY not interfere with the stroke count calculations.
	16) If you new memory you MUST also delete the memory you allocate. You
	can run valgrind on your code to see if you are leaking memory.
	    "valgrind a.out" will run valgrind on your executable, and "make
		memcheck" to check your program officially.

Trophies:
Three trophies will be awarded, each worth an extra letter grade to the
student winning it. No student can win more than one trophy.

1) Minimum strokes. This will be a +1 in addition to the points above for
minimizing semicolons in your code.
2) Minimum character count. Add up all of the characters (spaces included) in
your code. That's your score for this trophy.
3) Fastest Running Time. Time your code on sorting a million ints, like this:
time ./a.out < /public/mergesort_golf/million > /dev/null
0.669u 0.016s 0:00.68 98.5%     0+0k 0+0io 0pf+0w
The third number (.68) is how many seconds your code took to run (Wall Clock
time)
